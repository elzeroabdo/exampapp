"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    users: [User!]! @paginate
    userById(id: ID! @eq): User @find @guard
    userByEmail(email: String! @eq): User @find
    teachers: [Teacher!]! @all
    teacherById(id: ID! @eq): Teacher @find
    subjects: [Subject!]! @all
    subjectById(id: ID! @eq): Subject @find
    me: User @guard
    expiremunt: Int!
}


type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

type Teacher{
    id: ID!
    name: String!
    email: String!
    phone: String!
    user: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}

type Subject {
    id: ID!
    name: String!
    description: String
    teacher: Teacher! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}


type Mutation {
    CreateTeacher(input : CreateTeacherInput!): Teacher @field(resolver: "App\\GraphQL\\Mutations\\CreateTeacher") @guard
    UpdateTeacher(input : UpdateTeacherInput!): Teacher @field(resolver: "App\\GraphQL\\Mutations\\UpdateTeacher") @guard
    DeleteTeacher(input : DeleteTeacherInput!): Message! @field(resolver: "App\\GraphQL\\Mutations\\DeleteTeacher") @guard
    CreateSubject(input : CreateSubjectInput!): Subject @field(resolver: "App\\GraphQL\\Mutations\\CreateSubject")
    UpdateSubject(input : UpdateSubjectInput!): Subject @field(resolver: "App\\GraphQL\\Mutations\\UpdateSubject")
    DeleteSubject(input : DeleteSubjectInput!): Message! @field(resolver: "App\\GraphQL\\Mutations\\DeleteSubject")
    login(email: String!, password: String!): AuthPayload!  @field(resolver: "App\\GraphQL\\Mutations\\Login")
    register(input: RegisterInput!): AuthPayload @field(resolver: "App\\GraphQL\\Mutations\\RegisterMutation")
    logout: Message! @field(resolver: "App\\GraphQL\\Mutations\\Logout") @guard
}

input CreateTeacherInput {
    name: String!
    email: String!
    phone: String!
}

input UpdateTeacherInput {
    id: ID!
    name: String!
    email: String!
    phone: String!
}

input DeleteTeacherInput {
    id: ID!
}

input CreateSubjectInput {
    name: String!
    description: String
    teacherId: ID!
}

input UpdateSubjectInput {
    id: ID!
    name: String!
    description: String
    teacherId: ID!
}

input DeleteSubjectInput {
    id: ID!
}


type AuthPayload {
    token: String!
    user: User!
    ttl: Int!
}

input RegisterInput {
    name: String!
    email: String!
    password: String!
}


type Message {
    message: String!
}
